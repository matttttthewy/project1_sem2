# dashboard/app.py

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timezone
import os
import sys
import re
from io import StringIO

# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ streamlit run
if __name__ == "__main__":
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    current_dir = os.path.dirname(os.path.abspath(__file__))
    parent_dir = os.path.dirname(current_dir)
    sys.path.append(parent_dir)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º
    raw_data_path = os.path.join(parent_dir, "data", "raw", "habr_articles.csv")
    processed_data_path = os.path.join(parent_dir, "data", "processed", "habr.parquet")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –•–∞–±—Ä–∞",
    page_icon="üìä",
    layout="wide"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        font-weight: 600;
        margin-top: 1rem;
    }
    .metric-container {
        background-color: #f0f2f6;
        border-radius: 5px;
        padding: 1rem;
        text-align: center;
    }
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
    }
    .metric-label {
        font-size: 1rem;
        color: #4e5d78;
    }
    .insight-box {
        background-color: #e8f4f8;
        border-left: 5px solid #4e9dd6;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .footnote {
        font-size: 0.8rem;
        color: #666;
        margin-top: 2rem;
    }
</style>
""", unsafe_allow_html=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "1.5K" –≤ —á–∏—Å–ª–∞
def to_int(value):
    if pd.isna(value):
        return 0
    text = str(value).replace(" ", "").replace(",", ".").strip().lower()
    if not text:
        return 0
    if text.endswith("k"):
        try:
            return int(float(text[:-1]) * 1000)
        except ValueError:
            return 0
    match = re.search(r"\d+", text)
    return int(match.group()) if match else 0


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
@st.cache_data
def load_data(uploaded_file=None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Ç–µ–π –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    if uploaded_file is not None:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith('.parquet'):
                df = pd.read_parquet(uploaded_file)
            elif uploaded_file.name.endswith('.feather'):
                df = pd.read_feather(uploaded_file)
            else:
                st.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {uploaded_file.name}")
                return None

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            if 'date' in df.columns:
                df["date"] = pd.to_datetime(df["date"])

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            for col in ["views", "comments", "rating"]:
                if col in df.columns and df[col].dtype == 'object':
                    df[col] = df[col].apply(to_int)

            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ streamlit run
        if 'processed_data_path' in globals():
            if os.path.exists(processed_data_path):
                return pd.read_parquet(processed_data_path)
            elif os.path.exists(raw_data_path):
                df = pd.read_csv(raw_data_path)
                if 'date' in df.columns:
                    df["date"] = pd.to_datetime(df["date"])
                return df

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
        paths_to_check = [
            "../data/processed/habr.parquet",
            "../data/raw/habr_articles.csv",
            "data/processed/habr.parquet",
            "data/raw/habr_articles.csv",
            "habr.parquet",
            "habr_articles.csv",
            "habr_processed.csv"
        ]

        for path in paths_to_check:
            if os.path.exists(path):
                if path.endswith('.parquet'):
                    return pd.read_parquet(path)
                elif path.endswith('.csv'):
                    df = pd.read_csv(path)
                    if 'date' in df.columns:
                        df["date"] = pd.to_datetime(df["date"])
                    return df

        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


@st.cache_data
def preprocess_data(df):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None"""
    if df is None:
        return None

    df = df.copy()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—è—Ö
    df = df.dropna(subset=['title', 'author', 'date'])

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    df["year"] = df["date"].dt.year
    df["month"] = df["date"].dt.month
    df["month_name"] = df["date"].dt.strftime('%B')
    df["weekday"] = df["date"].dt.weekday
    df["hour"] = df["date"].dt.hour
    df["day"] = df["date"].dt.day

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ timezone
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        if df["date"].dt.tz is not None:
            # –î–ª—è –¥–∞–Ω–Ω—ã—Ö —Å timezone
            current_date = pd.Timestamp.now(tz=timezone.utc)
            df["days_live"] = (current_date - df["date"]).dt.total_seconds() / (24 * 60 * 60)
        else:
            # –î–ª—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ timezone
            current_date = pd.Timestamp.now()
            df["days_live"] = (current_date - df["date"]).dt.total_seconds() / (24 * 60 * 60)
    except Exception as e:
        st.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        df["days_live"] = 1

    df["days_live"] = df["days_live"].clip(lower=1).astype(int)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if 'text' in df.columns:
        df['text_length'] = df['text'].astype(str).str.len()
        df['word_count'] = df['text'].astype(str).apply(lambda x: len(x.split()))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if 'views' in df.columns and 'days_live' in df.columns:
        df['views_per_day'] = df['views'] / df['days_live'].clip(lower=1)

    if 'comments' in df.columns and 'views' in df.columns:
        df['engagement'] = (df['comments'] / df['views'].clip(lower=1)) * 100

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
    weekday_names = {
        0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        1: '–í—Ç–æ—Ä–Ω–∏–∫',
        2: '–°—Ä–µ–¥–∞',
        3: '–ß–µ—Ç–≤–µ—Ä–≥',
        4: '–ü—è—Ç–Ω–∏—Ü–∞',
        5: '–°—É–±–±–æ—Ç–∞',
        6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    df['weekday_name'] = df['weekday'].map(weekday_names)

    return df


def create_sample_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    import numpy as np

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç —Å 2023 –ø–æ 2025 –≥–æ–¥
    date_range = pd.date_range(start='2023-01-01', end='2025-05-01', freq='D')
    sample_size = 400

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    random_dates = np.random.choice(date_range, size=sample_size)

    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö IT —Ç–µ–º
    topics = ['Python', 'JavaScript', 'Machine Learning', 'DevOps', 'Cloud',
              'Microservices', 'API', 'Testing', 'UI/UX', 'Git', 'Docker',
              'Kubernetes', 'SQL', 'NoSQL', 'React', 'Vue.js', 'Angular',
              'TensorFlow', 'PyTorch', 'Big Data', 'Data Science', 'Web Development']

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    titles = [f"–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {np.random.choice(topics)} –≤ –ø—Ä–æ–µ–∫—Ç–µ" for _ in range(sample_size // 4)]
    titles += [f"–ü–æ—á–µ–º—É {np.random.choice(topics)} –ª—É—á—à–µ –¥–ª—è {np.random.choice(topics)}" for _ in
               range(sample_size // 4)]
    titles += [f"10 —Å–æ–≤–µ—Ç–æ–≤ –ø–æ {np.random.choice(topics)}" for _ in range(sample_size // 4)]
    titles += [f"–û–±–∑–æ—Ä {np.random.choice(topics)} –≤ 2024 –≥–æ–¥—É" for _ in range(sample_size - len(titles))]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    np.random.shuffle(titles)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω –∞–≤—Ç–æ—Ä–æ–≤
    authors = [f"Author_{i}" for i in range(1, 51)]

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    df = pd.DataFrame({
        'title': titles[:sample_size],
        'author': np.random.choice(authors, size=sample_size),
        'date': random_dates,
        'rating': np.random.exponential(scale=20, size=sample_size).astype(int),
        'views': np.random.exponential(scale=5000, size=sample_size).astype(int),
        'comments': np.random.exponential(scale=50, size=sample_size).astype(int),
        'text': ['Sample text content ' * np.random.randint(10, 100) for _ in range(sample_size)]
    })

    return df


# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
try:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
    st.markdown('<div class="main-header">–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –•–∞–±—Ä</div>', unsafe_allow_html=True)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    with st.sidebar:
        st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Parquet —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –•–∞–±—Ä–∞",
                                         type=["csv", "parquet", "feather"])

        st.markdown("### –û –ø—Ä–æ–µ–∫—Ç–µ")
        st.markdown("""
        –≠—Ç–æ—Ç –¥–∞—à–±–æ—Ä–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –•–∞–±—Ä. 
        –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

        –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:
        - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å—Ç–∞—Ç–µ–π
        - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        - –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        - –í–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """)

        use_demo = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ", value=False)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if uploaded_file:
        df = load_data(uploaded_file)
        if df is not None:
            st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
    elif use_demo:
        st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        df = create_sample_data()
    else:
        df = load_data()

    if df is None:
        st.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª.")
        st.stop()

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = preprocess_data(df)

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞ - –≤–∫–ª–∞–¥–∫–∏
    tabs = st.tabs(["–û–±–∑–æ—Ä", "–î–∞–Ω–Ω—ã–µ", "–†–µ–π—Ç–∏–Ω–≥–∏", "–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑", "–ê–≤—Ç–æ—Ä—ã", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"])

    # –í–∫–ª–∞–¥–∫–∞ 1: –û–±–∑–æ—Ä
    with tabs[0]:
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.markdown('<div class="sub-header">–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏</div>', unsafe_allow_html=True)

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.markdown(f"""
            <div class="metric-container">
                <div class="metric-value">{len(df)}</div>
                <div class="metric-label">–°—Ç–∞—Ç–µ–π</div>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
            <div class="metric-container">
                <div class="metric-value">{df['author'].nunique()}</div>
                <div class="metric-label">–ê–≤—Ç–æ—Ä–æ–≤</div>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown(f"""
            <div class="metric-container">
                <div class="metric-value">{round(df['rating'].mean(), 1)}</div>
                <div class="metric-label">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
            </div>
            """, unsafe_allow_html=True)

        with col4:
            st.markdown(f"""
            <div class="metric-container">
                <div class="metric-value">{df['rating'].max()}</div>
                <div class="metric-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥</div>
            </div>
            """, unsafe_allow_html=True)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        st.markdown('<div class="sub-header">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å—Ç–∞—Ç–µ–π</div>', unsafe_allow_html=True)

        fig = px.histogram(df, x='rating', nbins=30, marginal='box',
                           title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å—Ç–∞—Ç–µ–π',
                           opacity=0.7, color_discrete_sequence=['steelblue'])
        fig.update_layout(bargap=0.1)
        st.plotly_chart(fig, use_container_width=True)

        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        st.markdown("""
        <div class="insight-box">
        <strong>–ö–ª—é—á–µ–≤–æ–π –≤—ã–≤–æ–¥:</strong> –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–º–µ–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—É—é –ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –∞—Å–∏–º–º–µ—Ç—Ä–∏—é —Å –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ–º 
        —Å—Ç–∞—Ç–µ–π —Å –Ω–∏–∑–∫–∏–º –∏ —Å—Ä–µ–¥–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º (0-50) –∏ –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.
        </div>
        """, unsafe_allow_html=True)

        # –û–±–ª–∞–∫–æ —Å–ª–æ–≤
        st.markdown('<div class="sub-header">–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö</div>', unsafe_allow_html=True)

        if 'title' in df.columns:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            all_titles = ' '.join(df['title'].astype(str).dropna())
            stopwords = set(
                ['–≤', '–∏', '–Ω–∞', '—Å', '–¥–ª—è', '–ø–æ', '–Ω–µ', '–∫', '–∫–∞–∫', '–æ', '–∏–∑', '—á—Ç–æ', '–∞', '–∏–ª–∏', '–≤—ã', '–º—ã',
                 '–æ—Ç', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–æ', '–æ–Ω–∏', '–º–æ–π', '—Ç–≤–æ–π', '–≤–∞—à', '–Ω–∞—à', '—ç—Ç–æ—Ç', '—Ç–æ—Ç', '—Ç–∞–∫–æ–π', '—Ç–∞–∫', '–ø—Ä–∏',
                 'the', 'of', 'and', 'to', 'in', 'a', 'is', 'that', 'for', 'on', 'with', 'by', 'as', 'an', 'be', 'it'])

            wordcloud = WordCloud(
                width=1000,
                height=500,
                background_color='white',
                colormap='viridis',
                stopwords=stopwords,
                max_words=150,
                contour_width=3,
                collocations=True,
                min_font_size=8
            ).generate(all_titles)

            fig, ax = plt.subplots(figsize=(12, 6))
            ax.imshow(wordcloud, interpolation='bilinear')
            ax.axis('off')
            st.pyplot(fig)

            # –í—ã–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            st.markdown("""
            <div class="insight-box">
            <strong>–ö–ª—é—á–µ–≤–æ–π –≤—ã–≤–æ–¥:</strong> –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤—ã—è–≤–∏–ª –ø—Ä–µ–≤–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ —Å 
            –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ("–ø–æ—á–µ–º—É", "–∫–∞–∫", "—ç—Ç–æ"). –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã –∑–∞–Ω–∏–º–∞—é—Ç –∑–∞–º–µ—Ç–Ω–æ–µ 
            –º–µ—Å—Ç–æ –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ª–∞–Ω–¥—à–∞—Ñ—Ç–µ.
            </div>
            """, unsafe_allow_html=True)

    # –í–∫–ª–∞–¥–∫–∞ 2: –î–∞–Ω–Ω—ã–µ
    with tabs[1]:
        st.markdown('<div class="sub-header">–ò—Å—Å–ª–µ–¥—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ</div>', unsafe_allow_html=True)

        # –§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        col1, col2, col3 = st.columns(3)

        with col1:
            min_rating = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥",
                                   int(df['rating'].min()),
                                   int(df['rating'].max()),
                                   int(df['rating'].min()))

        with col2:
            authors_list = ['–í—Å–µ'] + sorted(df['author'].value_counts().head(20).index.tolist())
            selected_author = st.selectbox("–ê–≤—Ç–æ—Ä", authors_list)

        with col3:
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
            if 'date' in df.columns:
                min_date = df['date'].min().date()
                max_date = df['date'].max().date()
                date_range = st.date_input(
                    "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
                    value=(min_date, max_date),
                    min_value=min_date,
                    max_value=max_date
                )
                if len(date_range) == 2:
                    start_date, end_date = date_range
                else:
                    start_date, end_date = min_date, max_date

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_df = df.copy()

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        filtered_df = filtered_df[filtered_df['rating'] >= min_rating]

        # –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É
        if selected_author != '–í—Å–µ':
            filtered_df = filtered_df[filtered_df['author'] == selected_author]

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
        if 'date' in df.columns and len(date_range) == 2:
            filtered_df = filtered_df[(filtered_df['date'].dt.date >= start_date) &
                                      (filtered_df['date'].dt.date <= end_date)]

        # –í—ã–≤–æ–¥ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        display_cols = ['title', 'author', 'date', 'rating']
        if 'views' in filtered_df.columns:
            display_cols.append('views')
        if 'comments' in filtered_df.columns:
            display_cols.append('comments')
        if 'weekday_name' in filtered_df.columns:
            display_cols.append('weekday_name')

        st.dataframe(filtered_df[display_cols].reset_index(drop=True),
                     use_container_width=True,
                     height=400)

        st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:** {len(filtered_df)} –∏–∑ {len(df)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
        st.markdown('<div class="sub-header">–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</div>', unsafe_allow_html=True)

        if 'rating' in df.columns:
            stats_metrics = ['rating']
            if 'views' in df.columns:
                stats_metrics.append('views')
            if 'comments' in df.columns:
                stats_metrics.append('comments')
            if 'text_length' in df.columns:
                stats_metrics.append('text_length')

            stats_df = pd.DataFrame()
            stats_df['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'] = ['–°—Ä–µ–¥–Ω–µ–µ', '–ú–µ–¥–∏–∞–Ω–∞', '–ú–∏–Ω–∏–º—É–º', '–ú–∞–∫—Å–∏–º—É–º', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']

            for metric in stats_metrics:
                stats_df[metric.capitalize()] = [
                    round(filtered_df[metric].mean(), 2),
                    round(filtered_df[metric].median(), 2),
                    filtered_df[metric].min(),
                    filtered_df[metric].max(),
                    round(filtered_df[metric].std(), 2)
                ]

            st.dataframe(stats_df, use_container_width=True)

    # –í–∫–ª–∞–¥–∫–∞ 3: –†–µ–π—Ç–∏–Ω–≥–∏
    with tabs[2]:
        st.markdown('<div class="sub-header">–ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤</div>', unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
            if 'text_length' in df.columns:
                fig = px.scatter(df,
                                 x='text_length',
                                 y='rating',
                                 opacity=0.6,
                                 title='–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –¥–ª–∏–Ω–æ–π —Ç–µ–∫—Å—Ç–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º',
                                 labels={'text_length': '–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–∏–º–≤–æ–ª—ã)',
                                         'rating': '–†–µ–π—Ç–∏–Ω–≥'},
                                 color_discrete_sequence=['steelblue'],
                                 trendline="ols",
                                 trendline_color_override="red")
                st.plotly_chart(fig, use_container_width=True)

                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                corr = df['text_length'].corr(df['rating'])
                st.markdown(f"**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–ª–∏–Ω–æ–π —Ç–µ–∫—Å—Ç–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º:** {corr:.3f}")

                if abs(corr) < 0.1:
                    st.markdown("""
                    <div class="insight-box">
                    <strong>–ö–ª—é—á–µ–≤–æ–π –≤—ã–≤–æ–¥:</strong> –û–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–∏–º–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏, 
                    —á—Ç–æ –æ–ø—Ä–æ–≤–µ—Ä–≥–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç–∞—Ç–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é –¥–ª–∏–Ω—ã.
                    </div>
                    """, unsafe_allow_html=True)

        with col2:
            # –¢–æ–ø-10 —Å—Ç–∞—Ç–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            st.markdown('<div class="sub-header">–¢–æ–ø-10 —Å—Ç–∞—Ç–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É</div>',
                        unsafe_allow_html=True)

            top_rated = df.sort_values('rating', ascending=False).head(10)
            fig = px.bar(top_rated,
                         y='title',
                         x='rating',
                         orientation='h',
                         title='–¢–æ–ø-10 —Å—Ç–∞—Ç–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É',
                         labels={'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫', 'rating': '–†–µ–π—Ç–∏–Ω–≥'},
                         height=500,
                         color_discrete_sequence=['steelblue'])
            fig.update_layout(yaxis={'categoryorder': 'total ascending'})
            st.plotly_chart(fig, use_container_width=True)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–µ–π —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        percentiles = [10, 25, 50, 75, 90, 95, 99]
        percentile_values = np.percentile(df['rating'], percentiles)

        percentile_df = pd.DataFrame({
            '–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å': [f"{p}%" for p in percentiles],
            '–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞': percentile_values.round(1)
        })

        st.markdown('<div class="sub-header">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è–º</div>',
                    unsafe_allow_html=True)
        st.dataframe(percentile_df, use_container_width=True)

        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        st.markdown(f"""
        <div class="insight-box">
        <strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</strong> –°—Ç–∞—Ç—å—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {percentile_values[4]:.1f} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ç–æ–ø-10% –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É. 
        –†–µ–π—Ç–∏–Ω–≥ {percentile_values[6]:.1f} –∏ –≤—ã—à–µ –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ 1% —Å—Ç–∞—Ç–µ–π, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–ø–µ—à–Ω—ã–º–∏.
        </div>
        """, unsafe_allow_html=True)

    # –í–∫–ª–∞–¥–∫–∞ 4: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    with tabs[3]:
        st.markdown('<div class="sub-header">–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π</div>',
                    unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            weekday_avg = df.groupby('weekday_name').agg({
                'rating': ['mean', 'median', 'count']
            }).reset_index()

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å–∞
            weekday_avg.columns = ['weekday_name' if col == 'weekday_name' else f'rating_{col[1]}' for col in
                                   weekday_avg.columns]

            weekday_order = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                             '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞
            try:
                weekday_avg['weekday_name'] = pd.Categorical(
                    weekday_avg['weekday_name'],
                    categories=weekday_order,
                    ordered=True
                )
                weekday_avg = weekday_avg.sort_values('weekday_name')
            except:
                # –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                pass

            fig = px.bar(weekday_avg,
                         x='weekday_name',
                         y='rating_mean',
                         title='–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
                         labels={'weekday_name': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                                 'rating_mean': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'},
                         color_discrete_sequence=['steelblue'],
                         text='rating_mean')
            fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
            st.plotly_chart(fig, use_container_width=True)

            # –î–æ–±–∞–≤–∏–º –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            st.markdown("**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**")

            weekday_count_fig = px.bar(weekday_avg,
                                       x='weekday_name',
                                       y='rating_count',
                                       labels={'weekday_name': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                                               'rating_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π'},
                                       color_discrete_sequence=['lightblue'],
                                       text='rating_count')
            weekday_count_fig.update_traces(texttemplate='%{text}', textposition='outside')
            st.plotly_chart(weekday_count_fig, use_container_width=True)

        with col2:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            hour_avg = df.groupby('hour').agg({
                'rating': ['mean', 'median', 'count']
            }).reset_index()

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å–∞
            hour_avg.columns = ['hour' if col == 'hour' else f'rating_{col[1]}' for col in hour_avg.columns]

            fig = px.bar(hour_avg,
                         x='hour',
                         y='rating_mean',
                         title='–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —á–∞—Å–∞–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
                         labels={'hour': '–ß–∞—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
                                 'rating_mean': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'},
                         color_discrete_sequence=['indianred'],
                         text='rating_mean')
            fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
            fig.update_layout(xaxis=dict(tickmode='linear', tick0=0, dtick=1))
            st.plotly_chart(fig, use_container_width=True)

            # –î–æ–±–∞–≤–∏–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —á–∞—Å—ã-–¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            if len(df) > 50:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                st.markdown('<div class="sub-header">–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: —á–∞—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ vs –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</div>',
                            unsafe_allow_html=True)

                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                heatmap_data = df.pivot_table(
                    values='rating',
                    index='weekday_name',
                    columns='hour',
                    aggfunc='mean'
                )

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                if all(day in heatmap_data.index for day in weekday_order):
                    heatmap_data = heatmap_data.reindex(weekday_order)

                # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                fig = px.imshow(
                    heatmap_data,
                    labels=dict(x="–ß–∞—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", y="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", color="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥"),
                    x=heatmap_data.columns,
                    y=heatmap_data.index,
                    color_continuous_scale='Viridis',
                    aspect="auto"
                )
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)

        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
        st.markdown("""
        <div class="insight-box">
        <strong>–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º:</strong><br>
        1. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —á—ë—Ç–∫—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ —Å—Ä–µ–¥–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π.<br>
        2. –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∑–∞–º–µ—Ç–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Äî –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —á–∞—Å—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏.<br>
        3. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —Ü–µ–ª—å—é –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Ö –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.
        </div>
        """, unsafe_allow_html=True)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –≥–æ–¥–∞–º
        if 'year' in df.columns and 'month' in df.columns and df['year'].nunique() > 1:
            st.markdown('<div class="sub-header">–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –≥–æ–¥–∞–º</div>',
                        unsafe_allow_html=True)

            df['year_month'] = df['year'].astype(str) + '-' + df['month'].astype(str).str.zfill(2)
            year_month_stats = df.groupby('year_month').agg({
                'title': 'count',
                'rating': 'mean'
            }).reset_index()
            year_month_stats.columns = ['year_month', 'article_count', 'avg_rating']

            # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            ym_tabs = st.tabs(["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π", "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥"])

            with ym_tabs[0]:
                fig = px.bar(year_month_stats,
                             x='year_month',
                             y='article_count',
                             title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º',
                             labels={'year_month': '–ì–æ–¥-–ú–µ—Å—è—Ü',
                                     'article_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π'},
                             color_discrete_sequence=['steelblue'])
                fig.update_layout(xaxis={'categoryorder': 'category ascending'})
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, use_container_width=True)

            with ym_tabs[1]:
                fig = px.line(year_month_stats,
                              x='year_month',
                              y='avg_rating',
                              title='–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º',
                              labels={'year_month': '–ì–æ–¥-–ú–µ—Å—è—Ü',
                                      'avg_rating': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'},
                              markers=True)
                fig.update_layout(xaxis={'categoryorder': 'category ascending'})
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, use_container_width=True)

    # –í–∫–ª–∞–¥–∫–∞ 5: –ê–≤—Ç–æ—Ä—ã
    with tabs[4]:
        st.markdown('<div class="sub-header">–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</div>',
                    unsafe_allow_html=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
        author_stats = df.groupby('author').agg({
            'title': 'count',
            'rating': ['mean', 'median', 'max', 'sum']
        }).reset_index()

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å–∞
        author_stats.columns = ['author' if col == 'author' else f"{col[0]}_{col[1]}" for col in author_stats.columns]

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        author_stats = author_stats.rename(columns={
            'title_count': 'articles_count',
            'rating_mean': 'avg_rating',
            'rating_median': 'median_rating',
            'rating_max': 'max_rating',
            'rating_sum': 'total_rating'
        })

        col1, col2 = st.columns(2)

        with col1:
            # –¢–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞—Ç–µ–π
            top_authors = author_stats.sort_values('articles_count', ascending=False).head(10)

            fig = px.bar(top_authors,
                         x='author',
                         y='articles_count',
                         title='–¢–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞—Ç–µ–π',
                         labels={'author': '–ê–≤—Ç–æ—Ä',
                                 'articles_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π'},
                         color_discrete_sequence=['steelblue'],
                         text='articles_count')
            fig.update_traces(texttemplate='%{text}', textposition='outside')
            fig.update_layout(xaxis={'categoryorder': 'total descending'})
            fig.update_xaxes(tickangle=45)
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            # –¢–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É (–º–∏–Ω. 2 —Å—Ç–∞—Ç—å–∏)
            min_articles = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π —É –∞–≤—Ç–æ—Ä–∞", 1, 10, 2)

            top_rated_authors = author_stats[author_stats['articles_count'] >= min_articles].sort_values(
                'avg_rating', ascending=False).head(10)

            fig = px.bar(top_rated_authors,
                         x='author',
                         y='avg_rating',
                         title=f'–¢–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É (–º–∏–Ω. {min_articles} —Å—Ç–∞—Ç—å–∏)',
                         labels={'author': '–ê–≤—Ç–æ—Ä',
                                 'avg_rating': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'},
                         color_discrete_sequence=['indianred'],
                         text='avg_rating')
            fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
            fig.update_layout(xaxis={'categoryorder': 'total descending'})
            fig.update_xaxes(tickangle=45)
            st.plotly_chart(fig, use_container_width=True)

        # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π vs —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        st.markdown('<div class="sub-header">–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–∞—Ç–µ–π –∏ —Å—Ä–µ–¥–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∞–≤—Ç–æ—Ä–æ–≤</div>',
                    unsafe_allow_html=True)

        fig = px.scatter(
            author_stats[author_stats['articles_count'] >= 2],
            x='articles_count',
            y='avg_rating',
            size='total_rating',
            hover_name='author',
            labels={
                'articles_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π',
                'avg_rating': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
                'total_rating': '–°—É–º–º–∞—Ä–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥'
            },
            title='–ê–≤—Ç–æ—Ä—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π vs —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
            color_discrete_sequence=['steelblue']
        )
        st.plotly_chart(fig, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∞–≤—Ç–æ—Ä–∞–º (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
        st.markdown('<div class="sub-header">–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º</div>',
                    unsafe_allow_html=True)

        min_articles_filter = st.slider("–§–∏–ª—å—Ç—Ä: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π", 1, 10, 1, key="author_table_filter")
        author_detailed = author_stats[author_stats['articles_count'] >= min_articles_filter].sort_values(
            'articles_count', ascending=False)

        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for col in ['avg_rating', 'median_rating']:
            if col in author_detailed.columns:
                author_detailed[col] = author_detailed[col].round(2)

        st.dataframe(author_detailed, use_container_width=True)

        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        st.markdown("""
        <div class="insight-box">
        <strong>–ö–ª—é—á–µ–≤–æ–π –≤—ã–≤–æ–¥:</strong> –ê–≤—Ç–æ—Ä—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä –∑–Ω–∞—á–∏–º–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä—É–µ—Ç –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. 
        –í—ã—è–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –∞–≤—Ç–æ—Ä–æ–≤, —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞—é—â–∏—Ö –≤—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. 
        –ü—Ä–∏ —ç—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –≤–æ –º–Ω–æ–≥–æ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 
        –∞–≤—Ç–æ—Ä—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.
        </div>
        """, unsafe_allow_html=True)

    # –í–∫–ª–∞–¥–∫–∞ 6: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    with tabs[5]:
        st.markdown('<div class="sub-header">–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</div>', unsafe_allow_html=True)

        # –í—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        exclude_cols = ['year', 'month', 'weekday', 'hour', 'days_live', 'day']
        numeric_cols = [col for col in numeric_cols if col not in exclude_cols]

        if len(numeric_cols) > 1:
            # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            selected_cols = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                options=numeric_cols,
                default=numeric_cols[:min(5, len(numeric_cols))]
            )

            if selected_cols:
                corr_matrix = df[selected_cols].corr()

                # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                fig = px.imshow(
                    corr_matrix,
                    x=corr_matrix.columns,
                    y=corr_matrix.columns,
                    color_continuous_scale='RdBu_r',
                    zmin=-1, zmax=1,
                    title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
                    text_auto='.2f'
                )
                fig.update_layout(height=600)
                st.plotly_chart(fig, use_container_width=True)

                # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                st.markdown("""
                <div class="insight-box">
                <strong>–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å:</strong> –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏. 
                –ó–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∑–∫–∏–µ –∫ 1 —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–∏–ª—å–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é, –±–ª–∏–∑–∫–∏–µ –∫ -1 –Ω–∞ —Å–∏–ª—å–Ω—É—é –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é, 
                –∞ –±–ª–∏–∑–∫–∏–µ –∫ 0 –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Å–≤—è–∑–∏.
                </div>
                """, unsafe_allow_html=True)

                # –°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                strong_correlations = []

                for i in range(len(selected_cols)):
                    for j in range(i + 1, len(selected_cols)):
                        corr_value = corr_matrix.iloc[i, j]
                        if abs(corr_value) >= 0.5:  # –ü–æ—Ä–æ–≥ –¥–ª—è "—Å–∏–ª—å–Ω–æ–π" –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                            strong_correlations.append({
                                '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 1': selected_cols[i],
                                '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 2': selected_cols[j],
                                '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è': corr_value
                            })

                if strong_correlations:
                    st.markdown('<div class="sub-header">–°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (|r| ‚â• 0.5)</div>', unsafe_allow_html=True)
                    strong_corr_df = pd.DataFrame(strong_correlations)
                    strong_corr_df['–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'] = strong_corr_df['–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'].round(3)
                    st.dataframe(strong_corr_df.sort_values(by='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è', ascending=False), use_container_width=True)
                else:
                    st.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (|r| ‚â• 0.5)")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∞–ª–∏–∑–µ –≤ —Ñ—É—Ç–µ—Ä
    st.markdown("""
    ---
    <div class="footnote">
    <strong>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –•–∞–±—Ä–∞</strong><br>
    –î–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ —Ç–µ–º–∞—Ç–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –•–∞–±—Ä. 
    –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤–ª–∏—è–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ 
    –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–≤—Ç–æ—Ä—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    </div>
    """, unsafe_allow_html=True)

except Exception as e:
    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: streamlit run dashboard/app.py")